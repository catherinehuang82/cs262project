// Copyright 2015 gRPC authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


// Compile using:
// python3 -m grpc_tools.protoc -I./ --python_out=. --pyi_out=. --grpc_python_out=. ./chat.proto

syntax = "proto3";

package game;

// The chat service definition.
service GameService {
  rpc StartGame (Empty) returns (GameState) {} // start a game going
  rpc ProcessEncounter (EncounterResult) returns (Empty) {} // process an encounter between two random players. a void function
  rpc RunEncounter (EncounterProposal) returns (EncounterResult) {}  // propose an encounter between two random players
  rpc UpdateOpinions (Registers) returns (Empty) {} // update a player's opinions of other players' reliability based on input "Registers": the incoming opinions
  rpc Drop (Player) returns (Empty) {} // drop a player
}

message EncounterProposal {
    int32 active_id = 1;
    int32 passive_id = 2;
}

message EncounterResult {
    int32 active_id = 1;
    int32 passive_id = 2;
    bool accepted = 3; // whether or not encounter was accepted
    bool good = 4; // whether or not encounter turned out "good"
}

message GameState {
    float accept_threshold = 1;
    float reliability_distribution = 2;
    float p_g = 3;  // "good" encounter payoff value
    float p_b = 4;  // "bad" encounter playoff value
    float alpha_direct = 5;  // decay constant. how much a player weighs its existing opinion of another player vs information it gains from encounter with said player
    float alpha_indirect = 6;  // decay constant. how much a player weighs incoming opinions from other player it had a "good" encounter with
    float total_payoff = 7;
}

// message PlayerDatabase {
//     repeated Player players; // one proto message storing all the players and their stuff
// }

message Player {
    int32 id = 1;
    float reliability = 2; // true reliability value (unknown by other players)
    repeated Register = 3; // opinions of other players
    float payoff = 4; // amount of utility the player has accummulated throughout the game
}

message Register {
    int32 player_id = 1;  // id of player in question
    float opinion = 2; // opinion of the player in question's id
}

